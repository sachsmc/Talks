res.dt
res.dt[trial.leftout == 1 & seed == 9765 & scenario == "A" & varset == "X1"]
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-save-all-Ds.R')
eff <- gen_effects(scenario, n)
trials <- do.call(rbind, lapply(1:n, function(i) analyze.indi.data(samp.indi.data(i, eff, enns), i)))
leftout <- subset(trials, trial == n)
trials <- subset(trials, trial != n)
y <- subset(trials, var == "Y")$ests
y.se <- subset(trials, var == "Y")$ses
x <- subset(trials, grepl("^X", var))
xvars <- as.character(sort(unique(x$var)))
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
Y.full.sample <- sample_from_marginal(y, x.est, y.se, x.ses)
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-save-all-Ds.R')
Y.full.sample <- sample_from_marginal(y, x.est, y.se, x.ses)
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-save-all-Ds.R')
Y.full.sample <- sample_from_marginal(y, x.est, y.se, x.ses)
y.hat.samps <- vector(NA, mode = "list")
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-save-all-Ds.R')
Y.full.sample <- sample_from_marginal(y, x.est, y.se, x.ses)
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-save-all-Ds.R')
y
sink(NULL)
sink(NULL)
sink(NULL)
sink(NULL)
sink(NULL)
sink(NULL)
y
n <- 15
enns <- sample(ceiling(runif(n, 100, 500)))
eff <- gen_effects(scenario, n)
trials <- do.call(rbind, lapply(1:n, function(i) analyze.indi.data(samp.indi.data(i, eff, enns), i)))
leftout <- subset(trials, trial == n)
trials <- subset(trials, trial != n)
y <- subset(trials, var == "Y")$ests
y.se <- subset(trials, var == "Y")$ses
x <- subset(trials, grepl("^X", var))
xvars <- as.character(sort(unique(x$var)))
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
Y.full.sample <- sample_from_marginal(y, x.est, y.se, x.ses)
Y.full.sample$seed <- seed
Y.full.sample$scenario <- scenario
## compute D0
pred.0 <- pred_null(trials)
varsets <- all_sets_formula(xvars)
Y.full.sample
head(Y.full.sample)
seed <- 420
hist(subset(Y.full.sample, trial == 1)$y.marginal)
D.ests <- rep(NA, length(varsets))
D.true <- rep(NA, length(varsets))
P.D0 <- rep(NA, length(varsets))
var.groups <- sapply(varsets, paste, collapse = "|")
compare.sets <- vector(mode = "list", length = length(var.groups))
i <- 1
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, data.frame(trial.leftout = 1:(n - 1), y = eff$Y[1:(n-1)]), by = "trial.leftout")
compareto$absdiff.true <- with(compareto, abs(y - yhat))
compareto
varsets
i <- 7
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, data.frame(trial.leftout = 1:(n - 1), y = eff$Y[1:(n-1)]), by = "trial.leftout")
compareto$absdiff.true <- with(compareto, abs(y - yhat))
compareto$varset <- var.groups[i]
compareto$scenario <- scenario
compareto$replicate.seed <- seed
compareto
with(compareto, plot(y  ~ yhat))
abline(0, 1)
pred.ins
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-save-all-Ds.R')
pred.ins <- leave_one_out(trials, varsets[[i]])
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-save-all-Ds.R')
pred.ins <- leave_one_out(trials, varsets[[i]])
pred.ins
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, data.frame(trial.leftout = 1:n, y = eff$Y[1:n]), by = "trial.leftout")
compareto$absdiff.true <- with(compareto, abs(y - yhat))
compareto$varset <- var.groups[i]
compareto$scenario <- scenario
compareto$replicate.seed <- seed
compareto
compareto[, -grep("^xpred", colnames(compareto))]
n
trials
x1 <- x.est
x1.se <- x.ses
ses <- cbind(y.se, x1.se)
w <- cbind(y, x1)
xpred <- x1
prior <- get_prior(w, ncol(x1))
mcmc <- list(nburn=100,
nsave=100,
nskip=2,
ndisplay=1e6)
mcmc.lite <- list(nburn=100,
nsave=10,
nskip=2,
ndisplay=1e6)
mygrid <- seq(min(y) - 2 * sd(y), max(y) + 2 * sd(y), length.out = 1)
fit.init <- DPcdensity(y = c(y,y), x = rbind(x1, x1), mus=rbind(w, w), sds=rbind(ses, ses), xpred = xpred,
grid=mygrid,
compute.band=FALSE,
type.band="HPD",
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE,
work.dir = tempdir())
y.hat.samps <- NULL
setwd("G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code")
i <- 1
system.time(
fit.inside <- DPcdensity(y = c(y, rep(NA, length(y))), x = rbind(x1, x1), mus=rbind(w, w), sds=rbind(ses, ses), xpred = xpred,
grid=mygrid,
compute.band=FALSE,
type.band="HPD",
prior=prior,
mcmc=mcmc.lite,
state=fit.inside$state,
status=FALSE,
work.dir = tempdir())
y.hat.samps <- rbind(y.hat.samps,
data.frame(trial = 1:length(y), y.marginal = fit.inside$state$z[-c(1:length(y)), 1])))
system.time({
fit.inside <- DPcdensity(y = c(y, rep(NA, length(y))), x = rbind(x1, x1), mus=rbind(w, w), sds=rbind(ses, ses), xpred = xpred,
grid=mygrid,
compute.band=FALSE,
type.band="HPD",
prior=prior,
mcmc=mcmc.lite,
state=fit.inside$state,
status=FALSE,
work.dir = tempdir())
y.hat.samps <- rbind(y.hat.samps,
data.frame(trial = 1:length(y), y.marginal = fit.inside$state$z[-c(1:length(y)), 1]))})
fit.inside <- fit.init
system.time({
fit.inside <- DPcdensity(y = c(y, rep(NA, length(y))), x = rbind(x1, x1), mus=rbind(w, w), sds=rbind(ses, ses), xpred = xpred,
grid=mygrid,
compute.band=FALSE,
type.band="HPD",
prior=prior,
mcmc=mcmc.lite,
state=fit.inside$state,
status=FALSE,
work.dir = tempdir())
y.hat.samps <- rbind(y.hat.samps,
data.frame(trial = 1:length(y), y.marginal = fit.inside$state$z[-c(1:length(y)), 1]))})
.1 * 50
.1 * 5000
500 / 60
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-save-all-Ds.R')
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-linear-jags.R')
n
scenario
enns <- sample(ceiling(runif(n, 100, 500)))
eff <- gen_effects(scenario, n)
trials <- do.call(rbind, lapply(1:n, function(i) analyze.indi.data(samp.indi.data(i, eff, enns), i)))
leftout <- subset(trials, trial == n)
trials <- subset(trials, trial != n)
y <- subset(trials, var == "Y")$ests
y.se <- subset(trials, var == "Y")$ses
x <- subset(trials, grepl("^X", var))
xvars <- as.character(sort(unique(x$var)))
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
Y.full.sample <- sample_from_marginal(y, x.est, y.se, x.ses)
## compute D0
Y.full.samplÃ¶e
Y.full.sample
dim(Y.full.sample)
n
2800/n
2800/(n-1)
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-linear-jags.R')
Y.full.sample <- sample_from_marginal(y, x.est, y.se, x.ses)
head(Y.full.sample)
hist(subset(Y.full.sample, trial == 1)$y.marginal)
pred.0 <- pred_null(trials)
varsets <- all_sets_formula(xvars)
D.ests <- rep(NA, length(varsets))
D.true <- rep(NA, length(varsets))
P.D0 <- rep(NA, length(varsets))
var.groups <- sapply(varsets, paste, collapse = "|")
compare.sets <- vector(mode = "list", length = length(var.groups))
i <- 1
n
eff <- gen_effects(scenario, n)
trials <- do.call(rbind, lapply(1:n, function(i) analyze.indi.data(samp.indi.data(i, eff, enns), i)))
leftout <- subset(trials, trial == n)
#trials <- subset(trials, trial != n)
y <- subset(trials, var == "Y")$ests
y.se <- subset(trials, var == "Y")$ses
x <- subset(trials, grepl("^X", var))
xvars <- as.character(sort(unique(x$var)))
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
Y.full.sample <- sample_from_marginal(y, x.est, y.se, x.ses)
## compute D0
pred.0 <- pred_null(trials)
varsets <- all_sets_formula(xvars)
D.ests <- rep(NA, length(varsets))
D.true <- rep(NA, length(varsets))
P.D0 <- rep(NA, length(varsets))
var.groups <- sapply(varsets, paste, collapse = "|")
compare.sets <- vector(mode = "list", length = length(var.groups))
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, data.frame(trial.leftout = 1:n, y = eff$Y[1:n]), by = "trial.leftout")
compareto
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-linear-jags.R')
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, data.frame(trial.leftout = 1:n, y = eff$Y[1:n]), by = "trial.leftout")
compareto$absdiff.true <- with(compareto, abs(y - yhat))
compareto$varset <- var.groups[i]
compareto$scenario <- scenario
compareto$replicate.seed <- seed
compareto
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-linear-jags.R')
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, data.frame(trial.leftout = 1:n, y = eff$Y[1:n]), by = "trial.leftout")
compareto$absdiff.true <- with(compareto, abs(y - yhat))
compareto$varset <- var.groups[i]
compareto$scenario <- scenario
compareto$replicate.seed <- seed
compareto
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-linear-jags.R')
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, data.frame(trial.leftout = 1:n, y = eff$Y[1:n]), by = "trial.leftout")
compareto$absdiff.true <- with(compareto, abs(y - yhat))
compareto$varset <- var.groups[i]
compareto$scenario <- scenario
compareto$replicate.seed <- seed
compareto
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-linear-jags.R')
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, data.frame(trial.leftout = 1:n, y = eff$Y[1:n]), by = "trial.leftout")
compareto$absdiff.true <- with(compareto, abs(y - yhat))
compareto$varset <- var.groups[i]
compareto$scenario <- scenario
compareto$replicate.seed <- seed
compareto
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-linear-jags.R')
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, data.frame(trial.leftout = 1:n, y = eff$Y[1:n]), by = "trial.leftout")
compareto$absdiff.true <- with(compareto, abs(y - yhat))
compareto$varset <- var.groups[i]
compareto$scenario <- scenario
compareto$replicate.seed <- seed
compareto
with(compareto, plot(y ~ yha))
with(compareto, plot(y ~ yhat))
abline(0, )
abline(0, 1)
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-linear-jags.R')
gsub(".txt", "marginal.txt", output)
output <- "Ffile.txt"
gsub(".txt", "marginal.txt", output)
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code-linear-jags.R')
install.packages("tfestimators")
install.packages("keras")
library(keras)
install_keras()
library(keras)
install_keras()
install_keras()
library(reticulate)
conda_install("r-tensorflow", "html5lib")
?gsub
gsub('"', '', 'dick butt"')
253662 / 3
55200*1.1
8301/396520
43260/396520
seq(1, 40, by = 100)
library(blogdown)
install_hugo()
library(pseudo'')
library(pseudo)
pseudosurv
surv.omit
pseudo:::surv.omit
pseudo:::surv.tot
library(survival)
library(pseudo)
library(survival)
library(pseudo)
gen_data <- function(n = 500) {
gender <- rbinom(n, 1, .5)
param <- exp(1 + gender)
censoring <- rexp(n, param)
death <- rexp(n, param)
ttilde <- pmin(censoring, death)
delta <- 1.0 * (death < censoring)
data.frame(gender, ttilde, delta)
}
test <- gen_data()
head(tes)
head(test)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test))
psu.surv <- pseudosurv(test$ttilde, test$delta, .3)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .3)
with(test, by(psu.surv.3, gender, mean))
?by
by(test, as.factor(gender), mean)
by(test, as.factor(test$gender), mean)
tapply(test$psu.surv.3, test$gender, mean)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .3)$pseudo[, 1]
tapply(test$psu.surv.3, test$gender, mean)
abline(h = res)
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res)
abline(v = .3)
abline(h = res, col = 2:3)
abline(v = .3)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .3)$pseudo[, 1]
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res, col = 2:3)
abline(v = .3)
gen_data <- function(n = 500) {
gender <- rbinom(n, 1, .5)
param <- exp(1 + gender)
censoring <- rexp(n, param)
death <- rexp(n, param)
ttilde <- pmin(censoring, death)
delta <- 1.0 * (death < censoring)
data.frame(gender, ttilde, delta, death)
}
test <- gen_data()
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
ecdf(test$death[test$gender == 0])
lines(1- ecdf(test$death[test$gender == 0]))
deathcdf.0 <- ecdf(test$death[test$gender == 0])
?ecdf
lines(deathcdf.0())
lines(deathcdf.0(seq(0, 1, length.out = 400)))
lines(1 - deathcdf.0(seq(0, 1, length.out = 400)))
deathcdf.0(seq(0, 1, length.out = 400)
)
tt <- seq(0, 1, length.out = 400)
lines(c(1 - deathcdf.0(tt)) ~ tt)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
deathcdf.0 <- ecdf(test$death[test$gender == 0])
deathcdf.1 <- ecdf(test$death[test$gender == 1])
tt <- seq(0, 1, length.out = 400)
lines(c(1 - deathcdf.0(tt)) ~ tt)
lines(c(1 - deathcdf.1(tt)) ~ tt)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .3)$pseudo[, 1]
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res, col = 2:3)
abline(v = .3)
test <- gen_data(5000)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
deathcdf.0 <- ecdf(test$death[test$gender == 0])
deathcdf.1 <- ecdf(test$death[test$gender == 1])
tt <- seq(0, 1, length.out = 400)
lines(c(1 - deathcdf.0(tt)) ~ tt)
lines(c(1 - deathcdf.1(tt)) ~ tt)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .3)$pseudo[, 1]
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res, col = 2:3)
abline(v = .3)
test <- gen_data(5000)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
deathcdf.0 <- ecdf(test$death[test$gender == 0])
deathcdf.1 <- ecdf(test$death[test$gender == 1])
tt <- seq(0, 1, length.out = 400)
lines(c(1 - deathcdf.0(tt)) ~ tt)
lines(c(1 - deathcdf.1(tt)) ~ tt)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .3)$pseudo[, 1]
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res, col = 2:3)
abline(v = .3)
test <- gen_data(5000)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
deathcdf.0 <- ecdf(test$death[test$gender == 0])
deathcdf.1 <- ecdf(test$death[test$gender == 1])
tt <- seq(0, 1, length.out = 400)
lines(c(1 - deathcdf.0(tt)) ~ tt)
lines(c(1 - deathcdf.1(tt)) ~ tt)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .2)$pseudo[, 1]
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res, col = 2:3)
abline(v = .2)
test <- gen_data(5000)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
deathcdf.0 <- ecdf(test$death[test$gender == 0])
deathcdf.1 <- ecdf(test$death[test$gender == 1])
tt <- seq(0, 1, length.out = 400)
lines(c(1 - deathcdf.0(tt)) ~ tt)
lines(c(1 - deathcdf.1(tt)) ~ tt)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .2)$pseudo[, 1]
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res, col = 2:3)
abline(v = .2)
test <- gen_data(20000)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
deathcdf.0 <- ecdf(test$death[test$gender == 0])
deathcdf.1 <- ecdf(test$death[test$gender == 1])
tt <- seq(0, 1, length.out = 400)
lines(c(1 - deathcdf.0(tt)) ~ tt)
lines(c(1 - deathcdf.1(tt)) ~ tt)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .2)$pseudo[, 1]
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res, col = 2:3)
abline(v = .2)
test <- gen_data(10000)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
deathcdf.0 <- ecdf(test$death[test$gender == 0])
deathcdf.1 <- ecdf(test$death[test$gender == 1])
tt <- seq(0, 1, length.out = 400)
lines(c(1 - deathcdf.0(tt)) ~ tt)
lines(c(1 - deathcdf.1(tt)) ~ tt)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .4)$pseudo[, 1]
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res, col = 2:3)
abline(v = .4)
gen_data <- function(n = 500) {
gender <- rbinom(n, 1, .5)
param <- exp(1 + gender)
censoring <- rexp(n, exp(1.5))
death <- rexp(n, param)
ttilde <- pmin(censoring, death)
delta <- 1.0 * (death < censoring)
data.frame(gender, ttilde, delta, death)
}
test <- gen_data(10000)
summary(test)
plot(survfit(Surv(ttilde, delta) ~ gender, data = test), col = 2:3)
deathcdf.0 <- ecdf(test$death[test$gender == 0])
deathcdf.1 <- ecdf(test$death[test$gender == 1])
tt <- seq(0, 1, length.out = 400)
lines(c(1 - deathcdf.0(tt)) ~ tt)
lines(c(1 - deathcdf.1(tt)) ~ tt)
test$psu.surv.3 <- pseudosurv(test$ttilde, test$delta, .4)$pseudo[, 1]
res <- tapply(test$psu.surv.3, test$gender, mean)
abline(h = res, col = 2:3)
abline(v = .4)
library(survival)
?predict.coxph
147/413
?icweib
library(straweib)
?icweib
?readRDS
setdiff("A", LETTERS[1:4])
setdiff(LETTERS[1:4], "A")
install.packages("xaringan")
library(xaringan)
?moon_reader
library(lattice)
library(ggplot2)
library(gganimate)
library(broom)
library(gridSVG)
library(grid)
library(survival)
library(dplyr)
library(gapminder)
library(plotROC)
spans <- c(.25, .5, .75, 1)
data(ethanol)
# create loess fits, one for each span
fits <- data_frame(span = spans) %>%
group_by(span) %>%
do(augment(loess(NOx ~ E, ethanol, degree = 1, span = .$span)))
# calculate weights to reproduce this with local weighted fits
dat <- ethanol %>%
inflate(span = spans, center = unique(ethanol$E)) %>%
mutate(dist = abs(E - center)) %>%
filter(rank(dist) / n() <= span) %>%
mutate(weight = (1 - (dist / max(dist)) ^ 3) ^ 3)
# create faceted plot with changing points, local linear fits, and vertical lines,
# and constant hollow points and loess fit
p <- ggplot(dat, aes(E, NOx)) +
geom_point(aes(alpha = weight, frame = center)) +
geom_smooth(aes(group = center, frame = center, weight = weight), method = "lm", se = FALSE) +
geom_vline(aes(xintercept = center, frame = center), lty = 2) +
geom_point(shape = 1, data = ethanol, alpha = .25) +
geom_line(aes(y = .fitted, frame = E, cumulative = TRUE), data = fits, color = "red") +
facet_wrap(~span) +
ylim(0, 5) +
ggtitle("x0 = ")
gganimate(p, ani.options(convert = "C:/Program Files/ImageMagick-7.0.7-Q16/convert.exe"))
gganimate(p, animate::ani.options(convert = "C:/Program Files/ImageMagick-7.0.7-Q16/convert.exe"))
library(animation)
gganimate(p, ani.options(convert = "C:/Program Files/ImageMagick-7.0.7-Q16/convert.exe"))
gganimate(p, file = "test.gif")
gganimate(p, ani.options(convert = "C:/Progra~1/ImageMagick-7.0.7-Q16/convert.exe"))
gganimate(p, ani.options(convert = "C:/Users/micsac/convert.exe"))
ani.options(convert = "C:/Users/micsac/convert.exe")
gganimate(p)
gganimate(p, file = "test.gif")
setwd("G:/STAFF/Michael Sachs/Talks/Interactive-graphics")
gganimate(p, file = "test.gif")
gganimate(p, file = "C:/Users/micsac/test.gif")
?gganimate
gganimate(p, file = "C:/Users/micsac/test.gif", interval = .2)
